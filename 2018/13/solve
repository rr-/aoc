#!/usr/bin/env python3
import itertools
import typing as T
from copy import deepcopy
from dataclasses import dataclass
from pathlib import Path

CART_LEFT = "<"
CART_RIGHT = ">"
CART_UP = "^"
CART_DOWN = "v"
CART_DIRS = {CART_LEFT, CART_RIGHT, CART_UP, CART_DOWN}
TRACK_TURN_SLASH = "/"
TRACK_TURN_BACKSLASH = "\\"
TRACK_HORZ = "-"
TRACK_VERT = "|"
TRACK_CROSS = "+"

RULES: T.Dict[T.Union[T.Tuple[str, str], T.Tuple[str, int, str]], str] = {
    (TRACK_HORZ, CART_RIGHT): CART_RIGHT,
    (TRACK_HORZ, CART_LEFT): CART_LEFT,
    (TRACK_VERT, CART_UP): CART_UP,
    (TRACK_VERT, CART_DOWN): CART_DOWN,
    (TRACK_TURN_BACKSLASH, CART_RIGHT): CART_DOWN,
    (TRACK_TURN_BACKSLASH, CART_UP): CART_LEFT,
    (TRACK_TURN_BACKSLASH, CART_DOWN): CART_RIGHT,
    (TRACK_TURN_BACKSLASH, CART_LEFT): CART_UP,
    (TRACK_TURN_SLASH, CART_RIGHT): CART_UP,
    (TRACK_TURN_SLASH, CART_UP): CART_RIGHT,
    (TRACK_TURN_SLASH, CART_DOWN): CART_LEFT,
    (TRACK_TURN_SLASH, CART_LEFT): CART_DOWN,
    (TRACK_CROSS, 0, CART_RIGHT): CART_UP,
    (TRACK_CROSS, 0, CART_UP): CART_LEFT,
    (TRACK_CROSS, 0, CART_LEFT): CART_DOWN,
    (TRACK_CROSS, 0, CART_DOWN): CART_RIGHT,
    (TRACK_CROSS, 1, CART_RIGHT): CART_RIGHT,
    (TRACK_CROSS, 1, CART_UP): CART_UP,
    (TRACK_CROSS, 1, CART_LEFT): CART_LEFT,
    (TRACK_CROSS, 1, CART_DOWN): CART_DOWN,
    (TRACK_CROSS, 2, CART_RIGHT): CART_DOWN,
    (TRACK_CROSS, 2, CART_UP): CART_RIGHT,
    (TRACK_CROSS, 2, CART_LEFT): CART_UP,
    (TRACK_CROSS, 2, CART_DOWN): CART_LEFT,
}


@dataclass
class Cart:
    num: int
    x: int
    y: int
    direction: str
    turn_counter = 0

    def move(self) -> None:
        if self.direction == CART_LEFT:
            self.x -= 1
        elif self.direction == CART_RIGHT:
            self.x += 1
        elif self.direction == CART_UP:
            self.y -= 1
        elif self.direction == CART_DOWN:
            self.y += 1
        else:
            assert False

    def turn(self, cell: str) -> None:
        if (cell, self.direction) in RULES:
            self.direction = RULES[cell, self.direction]
        elif (cell, self.turn_counter, self.direction) in RULES:
            self.direction = RULES[cell, self.turn_counter, self.direction]
            self.turn_counter = (self.turn_counter + 1) % 3
        else:
            assert False, str(self) + f"\n{self} hit cell of type '{cell}'"


class Grid:
    def __init__(self, text: str) -> None:
        lines = text.rstrip("\n").split("\n")
        self.h = len(lines)
        self.w = max(map(len, lines))
        self.cells: T.Dict[T.Tuple[int, int], str] = {}
        self.carts: T.List[Cart] = []

        for y, x in itertools.product(range(self.h), range(self.w)):
            self.cells[y, x] = cell = lines[y][x]
            if cell not in CART_DIRS:
                continue
            self.carts.append(
                Cart(num=len(self.carts), x=x, y=y, direction=cell)
            )
            self.cells[y, x] = (
                TRACK_VERT if cell in {CART_UP, CART_DOWN} else TRACK_HORZ
            )


def part1(grid: Grid) -> T.Tuple[int, int]:
    grid = deepcopy(grid)
    while True:
        for cart in grid.carts:
            cart.move()
            for p1, p2 in itertools.combinations(grid.carts, 2):
                if p1 != p2 and p1.x == p2.x and p1.y == p2.y:
                    return p1.x, p1.y
            cart.turn(grid.cells[cart.y, cart.x])


def part2(grid: Grid) -> T.Tuple[int, int]:
    grid = deepcopy(grid)

    while len(grid.carts) > 1:
        dead: T.Set[int] = set()
        for cart in sorted(grid.carts, key=lambda p: (p.y, p.x)):
            if cart.num in dead:
                continue
            cart.move()
            for other in grid.carts:
                if (
                    cart.num != other.num
                    and cart.x == other.x
                    and cart.y == other.y
                    and not other.num in dead
                ):
                    dead.update({cart.num, other.num})
            if cart.num not in dead:
                cart.turn(grid.cells[cart.y, cart.x])
        grid.carts = [p for p in grid.carts if not p.num in dead]

    return grid.carts[0].x, grid.carts[0].y


def main() -> None:
    text = Path(__file__).with_name("input.txt").read_text()
    grid = Grid(text)

    x, y = part1(grid)
    print(f"{x},{y}")
    x, y = part2(grid)
    print(f"{x},{y}")


if __name__ == "__main__":
    main()
