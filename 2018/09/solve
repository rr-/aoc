#!/usr/bin/env python3
import re
import typing as T
from dataclasses import dataclass
from pathlib import Path


@dataclass
class Node:
    value: int
    left: T.Optional["Node"] = None
    right: T.Optional["Node"] = None


class LinkedList:
    def __init__(self) -> None:
        self.size = 0
        self.current_node: T.Optional[Node] = None

    def insert(self, value: int) -> None:
        node = Node(value=value)
        if not self.size:
            node.left = node
            node.right = node
        else:
            assert self.current_node
            assert self.current_node.right
            node.left = self.current_node
            node.right = self.current_node.right
            self.current_node.right.left = node
            self.current_node.right = node
        self.current_node = node
        self.size += 1

    def pop(self) -> int:
        assert self.current_node
        assert self.current_node.left
        assert self.current_node.right
        value = self.current_node.value
        self.current_node.left.right = self.current_node.right
        self.current_node.right.left = self.current_node.left
        self.current_node = self.current_node.right
        self.size -= 1
        return value

    def move(self, distance: int) -> None:
        if not self.size:
            return
        assert self.current_node
        if distance > 0:
            assert self.current_node.right
            for _ in range(distance):
                self.current_node = self.current_node.right
        else:
            assert self.current_node.left
            for _ in range(-distance):
                self.current_node = self.current_node.left


def part1(players: int, highest_marble: int) -> int:
    ring = LinkedList()
    ring.insert(value=0)
    scores = [0] * players
    for marble in range(1, highest_marble + 1):
        player = marble % players
        if marble % 23 == 0:
            ring.move(-7)
            scores[player] += marble + ring.pop()
        else:
            ring.move(1)
            ring.insert(marble)
    return max(scores)


def part2(players: int, highest_marble: int) -> int:
    return part1(players, highest_marble * 100)


def main() -> None:
    text = Path(__file__).with_name("input.txt").read_text()
    players, highest_marble = map(int, re.findall(r"\d+", text))

    print(part1(players, highest_marble))
    print(part2(players, highest_marble))


if __name__ == "__main__":
    main()
