#!/usr/bin/env python3
import sys
import typing as T
from pathlib import Path


def measure(x: int, y: int, serial: int) -> int:
    rack_id = x + 10
    val = (rack_id * y + serial) * rack_id
    val = (val % 1000) // 100
    val -= 5
    return val


def get_best_stats(
    serial: int, grid_size: int, cell_sizes: T.List[int]
) -> T.Tuple[int, int, int]:
    grid_size = 300
    grid = {
        (x, y): measure(x, y, serial)
        for x in range(1, grid_size + 1)
        for y in range(1, grid_size + 1)
    }

    best_value = 0
    best_x = 0
    best_y = 0
    best_cell_size = 0

    row_sums: T.Dict[T.Tuple[int, int, int], int] = {}
    for y in range(1, grid_size + 1):
        for x1 in range(1, grid_size + 1):
            value = 0
            for cell_size in range(max(cell_sizes) + 1):
                x2 = x1 + cell_size
                if x2 > grid_size:
                    break
                row_sums[x1, x2, y] = value
                value += grid[x2, y]

    for cell_size in cell_sizes:
        print(f"{cell_size}â€¦", file=sys.stderr, end="\r", flush=True)
        for y in range(1, grid_size + 1 - cell_size):
            for x in range(1, grid_size + 1 - cell_size):
                value = 0
                for dy in range(cell_size):
                    value += row_sums[x, x + cell_size, y + dy]
                if value > best_value:
                    best_x = x
                    best_y = y
                    best_cell_size = cell_size
                    best_value = value

    return best_x, best_y, best_cell_size


def part1(serial: int) -> T.Tuple[int, int]:
    x, y, size = get_best_stats(serial, 300, [3])
    return x, y


def part2(serial: int) -> T.Tuple[int, int, int]:
    x, y, size = get_best_stats(serial, 300, list(range(1, 301)))
    return x, y, size


def main() -> None:
    serial = int(Path(__file__).with_name("input.txt").read_text())

    x, y = part1(serial)
    print(f"{x},{y}")
    x, y, size = part2(serial)
    print(f"{x},{y},{size}")


if __name__ == "__main__":
    main()
