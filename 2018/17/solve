#!/usr/bin/env python3
import re
import typing as T
from collections import defaultdict
from pathlib import Path

from PIL import Image

WELL_X = 500
WELL_Y = 0

AIR = "."
CLAY = "#"
WELL = "+"
STILL_WATER = "~"
RUNNING_WATER = "|"


def parse_chunk(text: str) -> T.List[int]:
    num = list(map(int, re.findall(r"\d+", text)))
    if len(num) == 2:
        return list(range(num[0], num[1] + 1))
    elif len(num) == 1:
        return [num[0]]
    raise AssertionError


class World:
    def __init__(self, text: str) -> None:
        self.cells = defaultdict(lambda: AIR)
        for line in text.split("\n"):
            if not line:
                continue
            chunk_x, chunk_y = sorted(line.split())
            xs = parse_chunk(chunk_x)
            ys = parse_chunk(chunk_y)
            for x in xs:
                for y in ys:
                    self.cells[x, y] = CLAY

        self.x1 = min(key[0] for key in self.cells.keys()) - 1
        self.x2 = max(key[0] for key in self.cells.keys()) + 1
        self.y1 = min(key[1] for key in self.cells.keys())
        self.y2 = max(key[1] for key in self.cells.keys())
        self.w = self.x2 + 1 - self.x1
        self.h = self.y2 + 1 - self.y1
        self.cells[WELL_X, WELL_Y] = WELL

        self.heads: T.List[T.Tuple[int, int]] = [(WELL_X, WELL_Y)]

    def turn(self) -> bool:
        while self.heads:
            x, y = self.heads.pop(0)
            if self.cells[x, y] == WELL:
                self.cells[x, y + 1] = RUNNING_WATER
                self.heads.append((x, y + 1))
                return True

            if self.cells[x, y] != RUNNING_WATER:
                continue

            if self.cells[x, y + 1] == AIR:
                self.cells[x, y + 1] = RUNNING_WATER
                if y + 1 < self.y2:
                    self.heads.append((x, y + 1))
                return True

            if self.cells[x, y + 1] in {STILL_WATER, CLAY}:
                ret = False
                if self.cells[x - 1, y] == AIR:
                    self.cells[x - 1, y] = RUNNING_WATER
                    self.heads.append((x - 1, y))
                    ret = True
                if self.cells[x + 1, y] == AIR:
                    self.cells[x + 1, y] = RUNNING_WATER
                    self.heads.append((x + 1, y))
                    ret = True
                if ret:
                    return True

            x1 = x2 = x
            while self.cells[x1 - 1, y] == RUNNING_WATER:
                x1 -= 1
            while self.cells[x2 + 1, y] == RUNNING_WATER:
                x2 += 1

            if self.cells[x1 - 1, y] == CLAY and self.cells[x2 + 1, y] == CLAY:
                for x in range(x1, x2 + 1):
                    self.cells[x, y] = STILL_WATER
                    if self.cells[x, y - 1] == RUNNING_WATER:
                        self.heads.append((x, y - 1))
                return True

        return False

    def save_image(self, path: Path) -> None:
        img = Image.new("RGB", (self.w, self.h), "black")
        pixels = img.load()
        colors: T.Dict[str, T.Tuple[int, int, int]] = {
            AIR: (0, 0, 0),
            RUNNING_WATER: (0, 0, 255),
            STILL_WATER: (0, 0, 128),
            WELL: (255, 255, 0),
            CLAY: (256, 200, 0),
        }
        for x, y in self.cells.keys():
            if self.x1 <= x <= self.x2 and self.y1 <= y <= self.y2:
                pixels[x - self.x1, y - self.y1] = colors[self.cells[x, y]]
        img.save(str(path), format="png")


def part1(world: World) -> int:
    total = 0
    for pos, cell in world.cells.items():
        x, y = pos
        if y < world.y1 or y > world.y2:
            continue
        if cell in {STILL_WATER, RUNNING_WATER}:
            total += 1
    return total


def part2(world: World) -> int:
    total = 0
    for pos, cell in world.cells.items():
        x, y = pos
        if y < world.y1 or y > world.y2:
            continue
        if cell == STILL_WATER:
            total += 1
    return total


def main() -> None:
    text = Path(__file__).with_name("input.txt").read_text()
    world = World(text)

    while True:
        if not world.turn():
            break
    world.save_image(Path(__file__).with_name("image.png"))

    print(part1(world))
    print(part2(world))


if __name__ == "__main__":
    main()
