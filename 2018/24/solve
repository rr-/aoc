#!/usr/bin/env python3
import itertools
import re
import sys
import typing as T
from copy import deepcopy
from dataclasses import dataclass
from pathlib import Path


@dataclass
class Group:
    name: str
    tribe: int
    unit_count: int
    unit_health: int
    weaknesses: T.List[str]
    immunities: T.List[str]
    attack_type: str
    attack_value: int
    initiative: int

    @property
    def effective_power(self) -> int:
        return self.unit_count * self.attack_value

    def get_damage(self, enemy: "Group") -> int:
        if self.attack_type in enemy.immunities:
            return 0
        if self.attack_type in enemy.weaknesses:
            return self.effective_power * 2
        return self.effective_power


def turn(groups: T.List[Group]) -> bool:
    targets: T.Dict[str, Group] = {}
    targetted: T.Set[str] = set()
    for attacker in sorted(
        groups,
        key=lambda group: (group.effective_power, group.initiative),
        reverse=True,
    ):
        enemies = [
            enemy
            for enemy in groups
            if enemy.tribe != attacker.tribe
            and attacker.get_damage(enemy) > 0
            and enemy.name not in targetted
        ]
        enemies.sort(
            key=lambda enemy: (
                attacker.get_damage(enemy),
                enemy.effective_power,
                enemy.initiative,
            ),
            reverse=True,
        )

        enemy = next(iter(enemies), None)
        if enemy:
            targetted.add(enemy.name)
            targets[attacker.name] = enemy

    anything_killed = False
    for attacker in sorted(
        groups, key=lambda group: group.initiative, reverse=True
    ):
        enemy = targets.get(attacker.name)
        if not enemy:
            continue

        damage = attacker.get_damage(enemy)
        kills = min(enemy.unit_count, damage // enemy.unit_health)
        enemy.unit_count -= kills
        if enemy.unit_count <= 0:
            groups.remove(enemy)
        if kills:
            anything_killed = True

    if not anything_killed:
        return False

    return all(
        len([group for group in groups if group.tribe == tribe])
        for tribe in [0, 1]
    )


def part1(groups: T.List[Group]) -> int:
    groups = deepcopy(groups)
    while turn(groups):
        pass
    return sum(group.unit_count for group in groups)


def part2(groups: T.List[Group]) -> int:
    for boost in itertools.count():
        test_groups = deepcopy(groups)
        for group in test_groups:
            if group.tribe == 0:
                group.attack_value += boost
        while turn(test_groups):
            pass
        if all(group.tribe == 0 for group in test_groups):
            return sum(group.unit_count for group in test_groups)
    assert False


def parse_input(text: str) -> T.Iterable[Group]:
    for tribe, chunk in enumerate(text.split("\n\n")):
        lines = chunk.split("\n")
        tribe_name = lines.pop(0).strip(":")

        for i, line in enumerate(lines):
            if not line:
                continue

            match = re.match(
                r"^(?P<unit_count>\d+) units? each with "
                r"(?P<unit_health>\d+) hit points "
                r"(?:\((?P<attrs>[^\(\)]+)\) )?"
                r"with an attack that does (?P<attack_value>\d+) "
                r"(?P<attack_type>\w+) damage "
                r"at initiative (?P<initiative>\d+)$",
                line,
            )

            assert match, line

            group = Group(
                name=f"{tribe_name} group {i+1}",
                tribe=tribe,
                unit_count=int(match.group("unit_count")),
                unit_health=int(match.group("unit_health")),
                weaknesses=[],
                immunities=[],
                attack_type=match.group("attack_type"),
                attack_value=int(match.group("attack_value")),
                initiative=int(match.group("initiative")),
            )

            if match.group("attrs"):
                for attr_txt in match.group("attrs").split("; "):
                    attr_type, tmp = attr_txt.split(" to ")
                    attr_values = list(map(str.strip, tmp.split(",")))
                    if attr_type == "weak":
                        group.weaknesses = attr_values
                    else:
                        group.immunities = attr_values

            yield group


def main() -> None:
    text = Path(__file__).with_name("input.txt").read_text()
    groups = list(parse_input(text))

    print(part1(groups))
    print(part2(groups))


if __name__ == "__main__":
    main()
