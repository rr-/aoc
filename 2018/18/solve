#!/usr/bin/env python3
import itertools
import typing as T
from copy import deepcopy
from pathlib import Path

from PIL import Image

OPEN = "."
TREE = "|"
LUMBER = "#"
NEIGHBOUR_DELTAS: T.List[T.Tuple[int, int]] = [
    (x, y)
    for x, y in itertools.product([-1, 0, 1], [-1, 0, 1])
    if x != 0 or y != 0
]


class World:
    def __init__(self, text: str) -> None:
        lines = text.rstrip().split("\n")
        self.w = len(lines)
        self.h = max(map(len, lines))
        self.cells = {
            (y, x): lines[y][x] for y in range(self.h) for x in range(self.w)
        }

        # sentinel for borders
        for y in range(-1, self.h + 2):
            self.cells[-1, y] = OPEN
            self.cells[self.w, y] = OPEN
        for x in range(-1, self.w + 2):
            self.cells[x, -1] = OPEN
            self.cells[x, self.h] = OPEN

        self.buffer = deepcopy(self.cells)

    def turn(self) -> None:
        for y, x in itertools.product(range(self.h), range(self.w)):
            trees = 0
            lumber = 0
            for dx, dy in NEIGHBOUR_DELTAS:
                cell = self.cells[y + dy, x + dx]
                if cell == TREE:
                    trees += 1
                elif cell == LUMBER:
                    lumber += 1

            cell = self.cells[y, x]
            if cell == OPEN:
                self.buffer[y, x] = TREE if trees >= 3 else OPEN
            elif cell == TREE:
                self.buffer[y, x] = LUMBER if lumber >= 3 else TREE
            elif cell == LUMBER:
                self.buffer[y, x] = (
                    LUMBER if lumber >= 1 and trees >= 1 else OPEN
                )

        self.cells, self.buffer = self.buffer, self.cells

    def __hash__(self) -> int:
        return hash("".join(self.cells.values()))

    def save_image(self, path: Path) -> None:
        img = Image.new("RGB", (self.w, self.h), "black")
        pixels = img.load()
        colors: T.Dict[str, T.Tuple[int, int, int]] = {
            OPEN: (255, 255, 255),
            TREE: (0, 200, 0),
            LUMBER: (200, 150, 128),
        }
        for y, x in itertools.product(range(self.h), range(self.w)):
            pixels[x, y] = colors[self.cells[x, y]]
        img.save(str(path), format="png")


def part1(world: World) -> int:
    world = deepcopy(world)
    world.save_image(Path(__file__).with_name("part1-0000.png"))
    for turn in range(1, 11):
        world.turn()
        world.save_image(Path(__file__).with_name(f"part1-{turn:04d}.png"))

    cells = list(world.cells.values())
    return cells.count(LUMBER) * cells.count(TREE)


def part2(world: World) -> int:
    world = deepcopy(world)
    world_hashes: T.List[int] = []
    hash_idx: T.Optional[int] = None

    goal = 1_000_000_000
    turn = 0
    while turn < goal:
        world.turn()

        hash_ = hash(world)
        if hash_ in world_hashes:
            hash_idx = world_hashes.index(hash_)
            loop_size = turn - hash_idx
            turns_left = goal - turn
            turn += (turns_left // loop_size) * loop_size
        else:
            world_hashes.append(hash_)
        turn += 1

    cells = list(world.cells.values())
    return cells.count(LUMBER) * cells.count(TREE)


def main() -> None:
    text = Path(__file__).with_name("input.txt").read_text()
    world = World(text)

    print(part1(world))
    print(part2(world))


if __name__ == "__main__":
    main()
