#!/usr/bin/env python3
import typing as T
from dataclasses import dataclass
from pathlib import Path


@dataclass
class Instruction:
    opcode: str
    arg1: int
    arg2: int
    out: int


def get_divisors(n):
    large_divisors = []
    for i in range(1, int(n ** 0.5 + 1)):
        if n % i == 0:
            yield i
            if i * i != n:
                large_divisors.append(n // i)
    for divisor in reversed(large_divisors):
        yield divisor


def part1(ip: int, instructions: T.List[Instruction]) -> int:
    target = 836 + 22 * instructions[21].arg2 + instructions[23].arg2
    return sum(get_divisors(target))


def part2(ip: int, instructions: T.List[Instruction]) -> int:
    target = 836 + 22 * instructions[21].arg2 + instructions[23].arg2
    target += 10550400
    return sum(get_divisors(target))


def parse_input_file(text: str) -> T.Tuple[int, T.List[Instruction]]:
    lines = text.rstrip().split("\n")

    ip = int(lines.pop(0).split()[1])
    instructions: T.List[Instruction] = []

    for line in lines:
        words = line.split()
        opcode = words[0]
        arg1 = int(words[1])
        arg2 = int(words[2])
        out = int(words[3])

        instructions.append(
            Instruction(
                opcode=words[0],
                arg1=int(words[1]),
                arg2=int(words[2]),
                out=int(words[3]),
            )
        )

    return ip, instructions


def main() -> None:
    text = Path(__file__).with_name("input.txt").read_text()
    ip, instructions = parse_input_file(text)

    print(part1(ip, instructions))
    print(part2(ip, instructions))


if __name__ == "__main__":
    main()
