#!/usr/bin/env python3
import itertools
import re
import typing as T
from collections import defaultdict
from dataclasses import dataclass
from pathlib import Path


@dataclass
class Rule:
    parent: str
    child: str

    @staticmethod
    def from_line(line: str) -> "Rule":
        parent, child = re.findall(r"\b[A-Z]\b", line)
        return Rule(parent=parent, child=child)


class Tree:
    def __init__(self, rules: T.List[Rule]) -> None:
        self.all_nodes: T.Set[str] = set(rule.child for rule in rules) | set(
            rule.parent for rule in rules
        )

        self.parents: T.Dict[str, str] = defaultdict(str)
        for rule in rules:
            self.parents[rule.child] += rule.parent

        self.children: T.Dict[str, str] = defaultdict(str)
        for rule in rules:
            self.children[rule.parent] += rule.child

        self.roots: T.List[str] = [
            node for node in self.all_nodes if node not in self.parents
        ]


def part1(rules: T.List[Rule]) -> str:
    tree = Tree(rules)
    ret = ""

    while True:
        available: T.Set[str] = set(
            node
            for node in tree.all_nodes
            if (
                node not in ret
                and all(parent in ret for parent in tree.parents[node])
            )
        )

        ret += next(iter(sorted(available)))
        if len(ret) == len(tree.all_nodes):
            return ret


def part2(rules: T.List[Rule]) -> int:
    MIN_WAIT = 60
    WORKER_COUNT = 5

    @dataclass
    class Worker:
        node: T.Optional[str]
        wait: int

    tree = Tree(rules)
    ret = ""

    workers = [Worker(None, wait=0) for _ in range(WORKER_COUNT)]

    for seconds in itertools.count(1):
        available: T.Set[str] = set(
            node
            for node in tree.all_nodes
            if (
                node not in ret
                and all(parent in ret for parent in tree.parents[node])
                and not any(worker.node == node for worker in workers)
            )
        )

        for worker in workers:
            if worker.wait == 0:
                if not available:
                    continue
                node = next(iter(sorted(available)))
                worker.node = node
                worker.wait = MIN_WAIT + ord(node) - ord("A")
                available.remove(node)
            else:
                worker.wait -= 1

        for worker in workers:
            if worker.wait == 0 and worker.node:
                ret += worker.node
                worker.node = None

        if len(ret) == len(tree.all_nodes):
            return seconds

    assert False


def main() -> None:
    with Path(__file__).with_name("input.txt").open() as handle:
        rules = list(map(Rule.from_line, handle))

    print(part1(rules))
    print(part2(rules))


if __name__ == "__main__":
    main()
