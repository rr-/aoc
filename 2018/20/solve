#!/usr/bin/env python3
import math
import typing as T
from collections import defaultdict
from dataclasses import dataclass
from pathlib import Path

DIRS = {"N": (0, -1), "S": (0, 1), "E": (1, 0), "W": (-1, 0)}


def move(pos: T.Tuple[int, int], direction: str) -> T.Tuple[int, int]:
    x, y = pos
    dx, dy = DIRS[direction]
    return (x + dx, y + dy)


def add_edge(
    distances: T.Dict[T.Tuple[int, int], int],
    pos: T.Tuple[int, int],
    direction: str,
) -> None:
    x1, y1 = pos
    x2, y2 = move(pos, direction)
    distances[x2, y2] = min(
        distances.get((x2, y2), math.inf), distances.get((x1, y1), 0) + 1
    )


def part1(text: str) -> None:
    text = text.strip().lstrip("^").rstrip("$")
    start = (0, 0)
    positions = set([start])
    starts, ends = set(positions), set()
    stack = []
    distances = {}

    for t in text:
        if t in "NEWS":
            for pos in positions:
                add_edge(distances, pos, t)
            positions = set(move(pos, t) for pos in positions)
        elif t == "(":
            stack.append((starts, ends))
            starts, ends = positions, set()
        elif t == "|":
            ends.update(positions)
            positions = starts
        elif t == ")":
            positions.update(ends)
            starts, ends = stack.pop()
        else:
            raise NotImplementedError(f"not implemented: {t}")

    return max(distances.values())


def main() -> None:
    text = Path(__file__).with_name("input.txt").read_text()

    print(part1(text))


if __name__ == "__main__":
    main()
