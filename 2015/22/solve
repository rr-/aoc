#!/usr/bin/env python3
import copy
import dataclasses
import math
import re
import sys
import typing as T
from dataclasses import dataclass
from pathlib import Path


class Action:
    def work(self, caster: "Creature", opponent: "Creature") -> None:
        pass


@dataclass
class Creature:
    name: str
    health: int
    mana: int = 0
    armor: int = 0
    action: Action = dataclasses.field(default_factory=Action)
    auras: T.List["Aura"] = dataclasses.field(default_factory=list)


@dataclass
class Aura(Action):
    aura_id: int
    rounds_left: int
    start_actions: T.List["Action"] = dataclasses.field(default_factory=list)
    actions: T.List["Action"] = dataclasses.field(default_factory=list)
    end_actions: T.List["Action"] = dataclasses.field(default_factory=list)

    def work(self, caster: Creature, opponent: Creature) -> None:
        for action in self.start_actions:
            action.work(caster, opponent)
            self.start_actions = []
        for action in self.actions:
            action.work(caster, opponent)
        self.rounds_left -= 1
        if self.rounds_left == 0:
            for action in self.end_actions:
                action.work(caster, opponent)
            caster.auras = [
                aura for aura in caster.auras if aura.aura_id != self.aura_id
            ]


class DoNothing(Action):
    def work(self, caster: Creature, opponent: Creature) -> None:
        pass


@dataclass
class PhysicalDamage(Action):
    damage: int

    def work(self, caster: Creature, opponent: Creature) -> None:
        value = max(1, self.damage - opponent.armor)
        opponent.health -= value


@dataclass
class MagicalDamage(Action):
    damage: int

    def work(self, caster: Creature, opponent: Creature) -> None:
        opponent.health -= self.damage


@dataclass
class Heal(Action):
    health: int

    def work(self, caster: Creature, opponent: Creature) -> None:
        caster.health += self.health


@dataclass
class GainArmor(Action):
    armor: int

    def work(self, caster: Creature, opponent: Creature) -> None:
        caster.armor += self.armor


@dataclass
class GainMana(Action):
    mana: int

    def work(self, caster: Creature, opponent: Creature) -> None:
        caster.mana += self.mana


@dataclass
class GainAura(Action):
    aura_id: int
    duration: int
    start_action: T.Optional[Action] = None
    action: T.Optional[Action] = None
    end_action: T.Optional[Action] = None

    def work(self, caster: Creature, opponent: Creature) -> None:
        caster.auras.append(
            Aura(
                aura_id=self.aura_id,
                rounds_left=self.duration,
                start_actions=[self.start_action] if self.start_action else [],
                actions=[self.action] if self.action else [],
                end_actions=[self.end_action] if self.end_action else [],
            )
        )


@dataclass
class Spell:
    name: str
    cost: int
    actions: T.List[Action]


SPELLS = [
    Spell(name="Magic Missile", cost=53, actions=[MagicalDamage(damage=4)]),
    Spell(
        name="Drain",
        cost=73,
        actions=[MagicalDamage(damage=2), Heal(health=2)],
    ),
    Spell(
        name="Shield",
        cost=113,
        actions=[
            GainAura(
                aura_id=1,
                duration=6,
                start_action=GainArmor(7),
                end_action=GainArmor(-7),
            )
        ],
    ),
    Spell(
        name="Poison",
        cost=173,
        actions=[GainAura(action=MagicalDamage(3), duration=6, aura_id=2)],
    ),
    Spell(
        name="Recharge",
        cost=229,
        actions=[GainAura(action=GainMana(101), duration=5, aura_id=3)],
    ),
]


def get_available_spells(caster: Creature) -> T.Iterable[Spell]:
    available_spells = []
    for spell in SPELLS:
        if spell.cost > caster.mana:
            continue
        okay = True
        for action in spell.actions:
            if isinstance(action, GainAura):
                if any(
                    aura.aura_id == action.aura_id for aura in caster.auras
                ):
                    okay = False
                    break
        if okay:
            yield spell


KNOWN_MINIMUM_MANA_SPENT: int = math.inf


def battle(
    player: Creature,
    boss: Creature,
    hard: bool,
    turn: int = 0,
    mana_spent_so_far: int = 0,
    spells_casted: T.List[str] = [],
) -> int:
    global KNOWN_MINIMUM_MANA_SPENT

    base_player = player
    base_boss = boss

    if player.mana <= 0 or player.health <= 0:
        return math.inf, []
    if boss.health <= 0:
        return mana_spent_so_far, spells_casted

    player = copy.deepcopy(player)
    boss = copy.deepcopy(boss)
    for aura in player.auras:
        aura.work(player, boss)
    if hard and turn % 2 == 0:
        player.health -= 1

    if player.mana <= 0 or player.health <= 0:
        return math.inf, []
    if boss.health <= 0:
        return mana_spent_so_far, spells_casted

    if turn % 2 == 0:
        available_spells = list(get_available_spells(player))

        minimum_mana_to_spend = math.inf
        best_spells = []

        base_player = player
        base_boss = boss

        for spell in available_spells:
            if mana_spent_so_far + spell.cost > KNOWN_MINIMUM_MANA_SPENT:
                continue

            player = copy.deepcopy(base_player)
            boss = copy.deepcopy(base_boss)

            player.mana -= spell.cost
            player.action.work(player, boss)
            for action in spell.actions:
                action.work(player, boss)
            result = battle(
                player,
                boss,
                hard,
                turn + 1,
                mana_spent_so_far + spell.cost,
                spells_casted + [spell.name],
            )
            if result[0] < minimum_mana_to_spend:
                minimum_mana_to_spend = result[0]
                best_spells = result[1]

        if (
            minimum_mana_to_spend <= KNOWN_MINIMUM_MANA_SPENT
            and minimum_mana_to_spend != math.inf
        ):
            KNOWN_MINIMUM_MANA_SPENT = minimum_mana_to_spend
            print(KNOWN_MINIMUM_MANA_SPENT, best_spells, file=sys.stderr)

        return minimum_mana_to_spend, best_spells
    else:
        boss.action.work(boss, player)
        return battle(
            player, boss, hard, turn + 1, mana_spent_so_far, spells_casted
        )


def part1(boss: Creature) -> int:
    player = Creature(name="Player", health=50, mana=500, action=DoNothing())
    return battle(player, boss, hard=False)


def part2(boss: Creature) -> int:
    player = Creature(name="Player", health=50, mana=500, action=DoNothing())
    return battle(player, boss, hard=True)


def main() -> None:
    text = Path(__file__).with_name("input.txt").read_text()
    numbers = list(map(int, re.findall(r"\d+", text)))

    player = Creature(
        name="Player", health=10, mana=250, armor=0, action=DoNothing()
    )
    boss = Creature(name="Boss", health=14, action=PhysicalDamage(damage=8))

    boss = Creature(
        name="Boss",
        health=numbers[0],
        action=PhysicalDamage(damage=numbers[1]),
    )
    print(part1(boss))
    print(part2(boss))


if __name__ == "__main__":
    main()
