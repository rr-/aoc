#!/usr/bin/env python3
from collections import defaultdict
from pathlib import Path
from PIL import Image


def go(pos, char):
    if char == ">":
        return (pos[0] + 1, pos[1])
    elif char == "<":
        return (pos[0] - 1, pos[1])
    elif char == "^":
        return (pos[0], pos[1] - 1)
    elif char == "v":
        return (pos[0], pos[1] + 1)
    raise AssertionError


def dump_grid(grid, path):
    min_x = min(pos[0] for pos in grid.keys())
    min_y = min(pos[1] for pos in grid.keys())
    max_x = max(pos[0] for pos in grid.keys())
    max_y = max(pos[1] for pos in grid.keys())
    img = Image.new("RGB", (max_x + 1 - min_x, max_y + 1 - min_y), "black")
    pixels = img.load()
    for x, y in grid.keys():
        pixels[x - min_x, y - min_y] = (255, 255, 255)
    return img.save(str(path), format="png")


def part1(chars):
    grid = defaultdict(int)
    pos = (0, 0)
    grid[pos] += 1
    for char in chars:
        pos = go(pos, char)
        grid[pos] += 1
    dump_grid(grid, 'part1.png')
    return sum(1 for pos in grid.keys() if grid[pos] >= 1)


def part2(chars):
    grid = defaultdict(int)
    pos1 = (0, 0)
    pos2 = (0, 0)
    grid[pos1] += 1
    grid[pos2] += 1
    for char1, char2 in zip(chars[0::2], chars[1::2]):
        pos1 = go(pos1, char1)
        pos2 = go(pos2, char2)
        grid[pos1] += 1
        grid[pos2] += 1
    dump_grid(grid, 'part2.png')
    return sum(1 for pos in grid.keys() if grid[pos] >= 1)


if __name__ == "__main__":
    chars = list(Path("input.txt").read_text().rstrip())
    print(part1(chars))
    print(part2(chars))
