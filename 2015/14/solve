#!/usr/bin/env python3
import re
from dataclasses import dataclass
from pathlib import Path


@dataclass
class Rule:
    speed: int
    limit: int
    rest: int


@dataclass
class State:
    name: str
    rule: Rule
    flying: bool = True
    step: int = 0
    distance: int = 0
    score: int = 0


def get_rules(lines):
    regex = re.compile(
        r"(?P<name>\w+) can fly (?P<speed>\d+) km/s "
        "for (?P<limit>\d+) seconds, "
        r"but then must rest for (?P<rest>\d+) seconds\."
    )

    rules = {}
    for line in lines:
        match = regex.match(line)
        name = match.group("name")
        speed = int(match.group("speed"))
        limit = int(match.group("limit"))
        rest = int(match.group("rest"))
        rules[name] = Rule(speed=speed, limit=limit, rest=rest)

    return rules


def get_states(rules):
    return [State(name=name, rule=rule) for name, rule in rules.items()]


def simulation(states, rounds):
    for _ in range(rounds):
        for state in states:
            state.step += 1
            if state.flying:
                state.distance += state.rule.speed
                if state.step == state.rule.limit:
                    state.flying = False
                    state.step = 0
            else:
                if state.step == state.rule.rest:
                    state.flying = True
                    state.step = 0

        best_state = max(states, key=lambda state: state.distance)
        for state in states:
            if state.distance == best_state.distance:
                state.score += 1


def part1(lines):
    rules = get_rules(lines)
    states = get_states(rules)
    simulation(states, 2503)
    return max(states, key=lambda state: state.distance).distance


def part2(lines):
    rules = get_rules(lines)
    states = get_states(rules)
    simulation(states, 2503)
    return max(states, key=lambda state: state.score).score


if __name__ == "__main__":
    with Path(__file__).with_name("input.txt").open() as handle:
        lines = [line.rstrip() for line in handle]
        print(part1(lines))
        print(part2(lines))
