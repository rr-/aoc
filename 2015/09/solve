#!/usr/bin/env python3
import re
from pathlib import Path


def get_routes(lines):
    regex = re.compile(
        r"^(?P<place1>\w+) to (?P<place2>\w+) = (?P<distance>\d+)$"
    )

    distances = {}
    places = set()
    for line in lines:
        match = regex.match(line)
        assert match
        place1 = match.group("place1")
        place2 = match.group("place2")
        distance = int(match.group("distance"))
        distances[place1, place2] = distance
        distances[place2, place1] = distance
        places.update([place1, place2])

    def traverse(current_place, route=None, cost=0):
        if route is None:
            route = []
        route.append(current_place)
        if len(route) == len(places):
            yield route, cost
        else:
            for place in places:
                travel_cost = distances.get((current_place, place))
                if travel_cost is None or place in route:
                    continue
                yield from traverse(place, route[:], cost + travel_cost)

    def traverse_all():
        for start in places:
            yield from traverse(start)

    yield from traverse_all()


def part1(lines):
    return min(item[1] for item in get_routes(lines))


def part2(lines):
    return max(item[1] for item in get_routes(lines))


if __name__ == "__main__":
    with Path(__file__).with_name("input.txt").open() as handle:
        lines = [line.rstrip() for line in handle]
        print(part1(lines))
        print(part2(lines))
